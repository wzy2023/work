//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

model CommonGroupLayout {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  /// ![CommonGroupLayout.Item[]]
  data      Json
}

model HabitGroup {
  id        String      @id() @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt()
  isDeleted Boolean?    @default(false)
  name      String
  sort      Int?        @default(999)
  color     String?
  children  HabitItem[]
}

model HabitItem {
  id        String        @id() @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt()
  isDeleted Boolean?      @default(false)
  name      String
  sort      Int?          @default(999)
  enabled   Boolean?
  /// ![Habit.Count]
  count     Json?
  /// ![Habit.Frequency]
  frequency Json?
  groupId   String
  group     HabitGroup    @relation(fields: [groupId], references: [id])
  records   HabitRecord[]
}

model HabitRecord {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  date      DateTime
  reason    String?   @default("")
  /// ![Habit.ExecList]
  execList  Json?     @default("[]")
  habit     HabitItem @relation(fields: [habitId], references: [id])
  habitId   String
}

model TaskNode {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  type      String
  /// ![any]
  data      Json
}

model TaskEdge {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  type      String
  source    String
  target    String
}

model ButtonItem {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  groupId   String
  sort      Int?      @default(999)
  /// ![Buttons.Type]
  type      String
  title     String?
  content   String
}

model Collecting {
  id          String    @id() @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt()
  isDeleted   Boolean?  @default(false)
  /// ![Collecting.Type]
  type        String
  title       String
  description String?
  content     String    @db.Text()
  /// ![string[]]
  tags        Json
  /// ![string[]]
  images      Json?
}

model RssFeed {
  id          String        @id() @default(cuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt()
  isDeleted   Boolean?      @default(false)
  name        String
  url         String        @unique()
  /// ![string[]]
  tags        Json
  description String?
  frequency   String
  enabled     Boolean       @default(true)
  items       RssItem[]
  logs        RssFetchLog[]
}

model RssItem {
  id          String    @id() @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt()
  isDeleted   Boolean?  @default(false)
  title       String    @db.Text()
  description String?   @db.Text()
  content     String?   @db.Text()
  link        String    @db.Text()
  pubDate     DateTime
  isRead      Boolean   @default(false)
  isStarred   Boolean   @default(false)
  isSent      Boolean   @default(false)
  feedId      String
  feed        RssFeed   @relation(fields: [feedId], references: [id])
}

model RssFetchLog {
  id           String    @id() @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt()
  isDeleted    Boolean?  @default(false)
  executedAt   DateTime  @default(now())
  status       String
  errorMessage String?
  itemCount    Int       @default(0)
  /// ![Rss.FetchTriggerType]
  triggerType  String
  feedId       String
  feed         RssFeed   @relation(fields: [feedId], references: [id])
}

model AiRole {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  title     String
  content   String    @db.Text()
  /// ![string[]]
  tags      Json?
  project   String?
  enabled   Boolean   @default(true)
}

model AiInfo {
  id        String    @id() @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  isDeleted Boolean?  @default(false)
  title     String
  content   String    @db.Text()
  /// ![string[]]
  tags      Json?
  enabled   Boolean   @default(true)
}

model OrderDemand {
  id         String    @id() @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt()
  isDeleted  Boolean?  @default(false)
  type       String
  source     String
  confirmed  Boolean?
  title      String?
  desc       String?   @db.Text()
  url        String?
  person     String?
  price      String?
  applyNum   String?
  createTime String?
}
