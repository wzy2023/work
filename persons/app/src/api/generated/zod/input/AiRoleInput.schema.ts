/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '@prisma/client';

;
import { AiRoleSelectObjectSchema } from '../objects/AiRoleSelect.schema';
;
import { AiRoleWhereUniqueInputObjectSchema } from '../objects/AiRoleWhereUniqueInput.schema';
import { AiRoleWhereInputObjectSchema } from '../objects/AiRoleWhereInput.schema';
import { AiRoleOrderByWithRelationInputObjectSchema } from '../objects/AiRoleOrderByWithRelationInput.schema';
import { AiRoleScalarFieldEnumSchema } from '../enums/AiRoleScalarFieldEnum.schema';
import { AiRoleCreateInputObjectSchema } from '../objects/AiRoleCreateInput.schema';
import { AiRoleUncheckedCreateInputObjectSchema } from '../objects/AiRoleUncheckedCreateInput.schema';
import { AiRoleCreateManyInputObjectSchema } from '../objects/AiRoleCreateManyInput.schema';
import { AiRoleUpdateInputObjectSchema } from '../objects/AiRoleUpdateInput.schema';
import { AiRoleUncheckedUpdateInputObjectSchema } from '../objects/AiRoleUncheckedUpdateInput.schema';
import { AiRoleUpdateManyMutationInputObjectSchema } from '../objects/AiRoleUpdateManyMutationInput.schema';
import { AiRoleUncheckedUpdateManyInputObjectSchema } from '../objects/AiRoleUncheckedUpdateManyInput.schema';
import { AiRoleCountAggregateInputObjectSchema } from '../objects/AiRoleCountAggregateInput.schema';
import { AiRoleMinAggregateInputObjectSchema } from '../objects/AiRoleMinAggregateInput.schema';
import { AiRoleMaxAggregateInputObjectSchema } from '../objects/AiRoleMaxAggregateInput.schema';
import { AiRoleOrderByWithAggregationInputObjectSchema } from '../objects/AiRoleOrderByWithAggregationInput.schema';
import { AiRoleScalarWhereWithAggregatesInputObjectSchema } from '../objects/AiRoleScalarWhereWithAggregatesInput.schema'

type AiRoleInputSchemaType = {
    findUnique: z.ZodType<Prisma.AiRoleFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.AiRoleFindFirstArgs>,
    findMany: z.ZodType<Prisma.AiRoleFindManyArgs>,
    create: z.ZodType<Prisma.AiRoleCreateArgs>,
    createMany: z.ZodType<Prisma.AiRoleCreateManyArgs>,
    delete: z.ZodType<Prisma.AiRoleDeleteArgs>,
    deleteMany: z.ZodType<Prisma.AiRoleDeleteManyArgs>,
    update: z.ZodType<Prisma.AiRoleUpdateArgs>,
    updateMany: z.ZodType<Prisma.AiRoleUpdateManyArgs>,
    upsert: z.ZodType<Prisma.AiRoleUpsertArgs>,
    aggregate: z.ZodType<Prisma.AiRoleAggregateArgs>,
    groupBy: z.ZodType<Prisma.AiRoleGroupByArgs>,
    count: z.ZodType<Prisma.AiRoleCountArgs>
}

export const AiRoleInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), where: AiRoleWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), where: AiRoleWhereInputObjectSchema.optional(), orderBy: z.union([AiRoleOrderByWithRelationInputObjectSchema, AiRoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiRoleWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiRoleScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), where: AiRoleWhereInputObjectSchema.optional(), orderBy: z.union([AiRoleOrderByWithRelationInputObjectSchema, AiRoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiRoleWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiRoleScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), data: z.union([AiRoleCreateInputObjectSchema, AiRoleUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([AiRoleCreateManyInputObjectSchema, z.array(AiRoleCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), where: AiRoleWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: AiRoleWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), data: z.union([AiRoleUpdateInputObjectSchema, AiRoleUncheckedUpdateInputObjectSchema]), where: AiRoleWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([AiRoleUpdateManyMutationInputObjectSchema, AiRoleUncheckedUpdateManyInputObjectSchema]), where: AiRoleWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => AiRoleSelectObjectSchema.optional()), where: AiRoleWhereUniqueInputObjectSchema, create: z.union([AiRoleCreateInputObjectSchema, AiRoleUncheckedCreateInputObjectSchema]), update: z.union([AiRoleUpdateInputObjectSchema, AiRoleUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: AiRoleWhereInputObjectSchema.optional(), orderBy: z.union([AiRoleOrderByWithRelationInputObjectSchema, AiRoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiRoleWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), AiRoleCountAggregateInputObjectSchema]).optional(), _min: AiRoleMinAggregateInputObjectSchema.optional(), _max: AiRoleMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: AiRoleWhereInputObjectSchema.optional(), orderBy: z.union([AiRoleOrderByWithAggregationInputObjectSchema, AiRoleOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AiRoleScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AiRoleScalarFieldEnumSchema), _count: z.union([z.literal(true), AiRoleCountAggregateInputObjectSchema]).optional(), _min: AiRoleMinAggregateInputObjectSchema.optional(), _max: AiRoleMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: AiRoleWhereInputObjectSchema.optional(), orderBy: z.union([AiRoleOrderByWithRelationInputObjectSchema, AiRoleOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiRoleWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiRoleScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), AiRoleCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as AiRoleInputSchemaType;
