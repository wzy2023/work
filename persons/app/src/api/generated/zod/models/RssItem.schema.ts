/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    title: z.string(),
    description: z.string().nullish(),
    content: z.string().nullish(),
    link: z.string(),
    pubDate: z.coerce.date(),
    isRead: z.boolean().default(false),
    isStarred: z.boolean().default(false),
    isSent: z.boolean().default(false),
}
).strict();
const relationSchema = z.object({
    feed: z.record(z.unknown()),
}
);
const fkSchema = z.object({
    feedId: z.string(),
}
);

/**
 * `RssItem` schema excluding foreign keys and relations.
 */
export const RssItemScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `RssItem` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const RssItemSchema = RssItemScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const RssItemPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const RssItemPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    title: z.string(),
    description: z.string().nullish(),
    content: z.string().nullish(),
    link: z.string(),
    pubDate: z.coerce.date(),
    isRead: z.boolean().default(false),
    isStarred: z.boolean().default(false),
    isSent: z.boolean().default(false)
}).partial().passthrough();


/**
 * `RssItem` schema for create operations excluding foreign keys and relations.
 */
export const RssItemCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, isRead: true, isStarred: true, isSent: true
});


/**
 * `RssItem` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const RssItemCreateSchema = RssItemCreateScalarSchema.merge(fkSchema);


/**
 * `RssItem` schema for update operations excluding foreign keys and relations.
 */
export const RssItemUpdateScalarSchema = baseSchema.partial();


/**
 * `RssItem` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const RssItemUpdateSchema = RssItemUpdateScalarSchema.merge(fkSchema.partial());

