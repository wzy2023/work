/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    title: z.string(),
    content: z.string().nullish(),
    key: z.string(),
    enabled: z.boolean().default(true),
}
).strict();

/**
 * `InfoItem` schema excluding foreign keys and relations.
 */
export const InfoItemScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `InfoItem` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const InfoItemSchema = InfoItemScalarSchema;


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const InfoItemPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const InfoItemPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    title: z.string(),
    content: z.string().nullish(),
    key: z.string(),
    enabled: z.boolean().default(true)
}).partial().passthrough();


/**
 * `InfoItem` schema for create operations excluding foreign keys and relations.
 */
export const InfoItemCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, enabled: true
});


/**
 * `InfoItem` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const InfoItemCreateSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, enabled: true
});


/**
 * `InfoItem` schema for update operations excluding foreign keys and relations.
 */
export const InfoItemUpdateScalarSchema = baseSchema.partial();


/**
 * `InfoItem` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const InfoItemUpdateSchema = InfoItemUpdateScalarSchema;

