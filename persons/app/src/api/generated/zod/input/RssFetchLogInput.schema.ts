/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '@prisma/client';

;
import { RssFetchLogSelectObjectSchema } from '../objects/RssFetchLogSelect.schema';
import { RssFetchLogIncludeObjectSchema } from '../objects/RssFetchLogInclude.schema';
import { RssFetchLogWhereUniqueInputObjectSchema } from '../objects/RssFetchLogWhereUniqueInput.schema';
import { RssFetchLogWhereInputObjectSchema } from '../objects/RssFetchLogWhereInput.schema';
import { RssFetchLogOrderByWithRelationInputObjectSchema } from '../objects/RssFetchLogOrderByWithRelationInput.schema';
import { RssFetchLogScalarFieldEnumSchema } from '../enums/RssFetchLogScalarFieldEnum.schema';
import { RssFetchLogCreateInputObjectSchema } from '../objects/RssFetchLogCreateInput.schema';
import { RssFetchLogUncheckedCreateInputObjectSchema } from '../objects/RssFetchLogUncheckedCreateInput.schema';
import { RssFetchLogCreateManyInputObjectSchema } from '../objects/RssFetchLogCreateManyInput.schema';
import { RssFetchLogUpdateInputObjectSchema } from '../objects/RssFetchLogUpdateInput.schema';
import { RssFetchLogUncheckedUpdateInputObjectSchema } from '../objects/RssFetchLogUncheckedUpdateInput.schema';
import { RssFetchLogUpdateManyMutationInputObjectSchema } from '../objects/RssFetchLogUpdateManyMutationInput.schema';
import { RssFetchLogUncheckedUpdateManyInputObjectSchema } from '../objects/RssFetchLogUncheckedUpdateManyInput.schema';
import { RssFetchLogCountAggregateInputObjectSchema } from '../objects/RssFetchLogCountAggregateInput.schema';
import { RssFetchLogMinAggregateInputObjectSchema } from '../objects/RssFetchLogMinAggregateInput.schema';
import { RssFetchLogMaxAggregateInputObjectSchema } from '../objects/RssFetchLogMaxAggregateInput.schema';
import { RssFetchLogAvgAggregateInputObjectSchema } from '../objects/RssFetchLogAvgAggregateInput.schema';
import { RssFetchLogSumAggregateInputObjectSchema } from '../objects/RssFetchLogSumAggregateInput.schema';
import { RssFetchLogOrderByWithAggregationInputObjectSchema } from '../objects/RssFetchLogOrderByWithAggregationInput.schema';
import { RssFetchLogScalarWhereWithAggregatesInputObjectSchema } from '../objects/RssFetchLogScalarWhereWithAggregatesInput.schema'

type RssFetchLogInputSchemaType = {
    findUnique: z.ZodType<Prisma.RssFetchLogFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.RssFetchLogFindFirstArgs>,
    findMany: z.ZodType<Prisma.RssFetchLogFindManyArgs>,
    create: z.ZodType<Prisma.RssFetchLogCreateArgs>,
    createMany: z.ZodType<Prisma.RssFetchLogCreateManyArgs>,
    delete: z.ZodType<Prisma.RssFetchLogDeleteArgs>,
    deleteMany: z.ZodType<Prisma.RssFetchLogDeleteManyArgs>,
    update: z.ZodType<Prisma.RssFetchLogUpdateArgs>,
    updateMany: z.ZodType<Prisma.RssFetchLogUpdateManyArgs>,
    upsert: z.ZodType<Prisma.RssFetchLogUpsertArgs>,
    aggregate: z.ZodType<Prisma.RssFetchLogAggregateArgs>,
    groupBy: z.ZodType<Prisma.RssFetchLogGroupByArgs>,
    count: z.ZodType<Prisma.RssFetchLogCountArgs>
}

export const RssFetchLogInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), where: RssFetchLogWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), where: RssFetchLogWhereInputObjectSchema.optional(), orderBy: z.union([RssFetchLogOrderByWithRelationInputObjectSchema, RssFetchLogOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RssFetchLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(RssFetchLogScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), where: RssFetchLogWhereInputObjectSchema.optional(), orderBy: z.union([RssFetchLogOrderByWithRelationInputObjectSchema, RssFetchLogOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RssFetchLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(RssFetchLogScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), data: z.union([RssFetchLogCreateInputObjectSchema, RssFetchLogUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([RssFetchLogCreateManyInputObjectSchema, z.array(RssFetchLogCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), where: RssFetchLogWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: RssFetchLogWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), data: z.union([RssFetchLogUpdateInputObjectSchema, RssFetchLogUncheckedUpdateInputObjectSchema]), where: RssFetchLogWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([RssFetchLogUpdateManyMutationInputObjectSchema, RssFetchLogUncheckedUpdateManyInputObjectSchema]), where: RssFetchLogWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => RssFetchLogSelectObjectSchema.optional()), include: z.lazy(() => RssFetchLogIncludeObjectSchema.optional()), where: RssFetchLogWhereUniqueInputObjectSchema, create: z.union([RssFetchLogCreateInputObjectSchema, RssFetchLogUncheckedCreateInputObjectSchema]), update: z.union([RssFetchLogUpdateInputObjectSchema, RssFetchLogUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: RssFetchLogWhereInputObjectSchema.optional(), orderBy: z.union([RssFetchLogOrderByWithRelationInputObjectSchema, RssFetchLogOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RssFetchLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), RssFetchLogCountAggregateInputObjectSchema]).optional(), _min: RssFetchLogMinAggregateInputObjectSchema.optional(), _max: RssFetchLogMaxAggregateInputObjectSchema.optional(), _avg: RssFetchLogAvgAggregateInputObjectSchema.optional(), _sum: RssFetchLogSumAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: RssFetchLogWhereInputObjectSchema.optional(), orderBy: z.union([RssFetchLogOrderByWithAggregationInputObjectSchema, RssFetchLogOrderByWithAggregationInputObjectSchema.array()]).optional(), having: RssFetchLogScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(RssFetchLogScalarFieldEnumSchema), _count: z.union([z.literal(true), RssFetchLogCountAggregateInputObjectSchema]).optional(), _min: RssFetchLogMinAggregateInputObjectSchema.optional(), _max: RssFetchLogMaxAggregateInputObjectSchema.optional(), _avg: RssFetchLogAvgAggregateInputObjectSchema.optional(), _sum: RssFetchLogSumAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: RssFetchLogWhereInputObjectSchema.optional(), orderBy: z.union([RssFetchLogOrderByWithRelationInputObjectSchema, RssFetchLogOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: RssFetchLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(RssFetchLogScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), RssFetchLogCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as RssFetchLogInputSchemaType;
