/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    type: z.string(),
    provider: z.string(),
    providerAccountId: z.string(),
    refresh_token: z.string().nullish(),
    access_token: z.string().nullish(),
    expires_at: z.number().nullish(),
    token_type: z.string().nullish(),
    scope: z.string().nullish(),
    id_token: z.string().nullish(),
    session_state: z.string().nullish(),
}
).strict();
const relationSchema = z.object({
    user: z.record(z.unknown()),
}
);
const fkSchema = z.object({
    userId: z.string(),
}
);

/**
 * `UserAccount` schema excluding foreign keys and relations.
 */
export const UserAccountScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `UserAccount` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const UserAccountSchema = UserAccountScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const UserAccountPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const UserAccountPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    type: z.string(),
    provider: z.string(),
    providerAccountId: z.string(),
    refresh_token: z.string().nullish(),
    access_token: z.string().nullish(),
    expires_at: z.union([z.number().nullish(), z.record(z.unknown())]),
    token_type: z.string().nullish(),
    scope: z.string().nullish(),
    id_token: z.string().nullish(),
    session_state: z.string().nullish()
}).partial().passthrough();


/**
 * `UserAccount` schema for create operations excluding foreign keys and relations.
 */
export const UserAccountCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true
});


/**
 * `UserAccount` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const UserAccountCreateSchema = UserAccountCreateScalarSchema.merge(fkSchema);


/**
 * `UserAccount` schema for update operations excluding foreign keys and relations.
 */
export const UserAccountUpdateScalarSchema = baseSchema.partial();


/**
 * `UserAccount` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const UserAccountUpdateSchema = UserAccountUpdateScalarSchema.merge(fkSchema.partial());

