/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    name: z.string(),
    url: z.string(),
    tags: z.any(),
    description: z.string().nullish(),
    frequency: z.string(),
    enabled: z.boolean().default(true),
}
).strict();
const relationSchema = z.object({
    items: z.array(z.unknown()).optional(),
    logs: z.array(z.unknown()).optional(),
}
);

/**
 * `RssFeed` schema excluding foreign keys and relations.
 */
export const RssFeedScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `RssFeed` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const RssFeedSchema = RssFeedScalarSchema.merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const RssFeedPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const RssFeedPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    name: z.string(),
    url: z.string(),
    tags: z.any(),
    description: z.string().nullish(),
    frequency: z.string(),
    enabled: z.boolean().default(true)
}).partial().passthrough();


/**
 * `RssFeed` schema for create operations excluding foreign keys and relations.
 */
export const RssFeedCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, enabled: true
});


/**
 * `RssFeed` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const RssFeedCreateSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, enabled: true
});


/**
 * `RssFeed` schema for update operations excluding foreign keys and relations.
 */
export const RssFeedUpdateScalarSchema = baseSchema.partial();


/**
 * `RssFeed` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const RssFeedUpdateSchema = RssFeedUpdateScalarSchema;

