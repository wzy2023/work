/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { type QueryContext, type CrudContract, type PermissionCheckerContext } from "@zenstackhq/runtime";
import { allFieldsEqual } from "@zenstackhq/runtime/validation";
import { type PolicyDef, type PermissionCheckerConstraint } from "@zenstackhq/runtime/enhancements/node";

const policy: PolicyDef = {
    policy: {
        commonGroupLayout: {
            modelLevel: {
                read: { guard: CommonGroupLayout_read, },
                create: { guard: CommonGroupLayout_create, },
                update: { guard: CommonGroupLayout_update, },
                postUpdate: { guard: CommonGroupLayout_postUpdate, },
                delete: { guard: CommonGroupLayout_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        habitGroup: {
            modelLevel: {
                read: { guard: HabitGroup_read, },
                create: { guard: HabitGroup_create, },
                update: { guard: HabitGroup_update, },
                postUpdate: { guard: HabitGroup_postUpdate, },
                delete: { guard: HabitGroup_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        habitItem: {
            modelLevel: {
                read: { guard: HabitItem_read, },
                create: { guard: HabitItem_create, },
                update: { guard: HabitItem_update, },
                postUpdate: { guard: HabitItem_postUpdate, },
                delete: { guard: HabitItem_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        habitRecord: {
            modelLevel: {
                read: { guard: HabitRecord_read, },
                create: { guard: HabitRecord_create, },
                update: { guard: HabitRecord_update, },
                postUpdate: { guard: HabitRecord_postUpdate, },
                delete: { guard: HabitRecord_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        taskNode: {
            modelLevel: {
                read: { guard: TaskNode_read, },
                create: { guard: TaskNode_create, },
                update: { guard: TaskNode_update, },
                postUpdate: { guard: TaskNode_postUpdate, },
                delete: { guard: TaskNode_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        taskEdge: {
            modelLevel: {
                read: { guard: TaskEdge_read, },
                create: { guard: TaskEdge_create, },
                update: { guard: TaskEdge_update, },
                postUpdate: { guard: TaskEdge_postUpdate, },
                delete: { guard: TaskEdge_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        buttonItem: {
            modelLevel: {
                read: { guard: ButtonItem_read, },
                create: { guard: ButtonItem_create, },
                update: { guard: ButtonItem_update, },
                postUpdate: { guard: ButtonItem_postUpdate, },
                delete: { guard: ButtonItem_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        collecting: {
            modelLevel: {
                read: { guard: Collecting_read, },
                create: { guard: Collecting_create, },
                update: { guard: Collecting_update, },
                postUpdate: { guard: Collecting_postUpdate, },
                delete: { guard: Collecting_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        rssFeed: {
            modelLevel: {
                read: { guard: RssFeed_read, },
                create: { guard: RssFeed_create, },
                update: { guard: RssFeed_update, },
                postUpdate: { guard: RssFeed_postUpdate, },
                delete: { guard: RssFeed_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        rssItem: {
            modelLevel: {
                read: { guard: RssItem_read, },
                create: { guard: RssItem_create, },
                update: { guard: RssItem_update, },
                postUpdate: { guard: RssItem_postUpdate, },
                delete: { guard: RssItem_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
        rssFetchLog: {
            modelLevel: {
                read: { guard: RssFetchLog_read, },
                create: { guard: RssFetchLog_create, },
                update: { guard: RssFetchLog_update, },
                postUpdate: { guard: RssFetchLog_postUpdate, },
                delete: { guard: RssFetchLog_delete, }
            },
            fieldLevel: {
                read:
                {

                },
                update:
                {

                },
            },

        },
    },
    validation: {
        commonGroupLayout: { hasValidation: false },
        habitGroup: { hasValidation: false },
        habitItem: { hasValidation: false },
        habitRecord: { hasValidation: false },
        taskNode: { hasValidation: false },
        taskEdge: { hasValidation: false },
        buttonItem: { hasValidation: false },
        collecting: { hasValidation: false },
        rssFeed: { hasValidation: false },
        rssItem: { hasValidation: false },
        rssFetchLog: { hasValidation: false },
    },

};

function CommonGroupLayout_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_CommonGroupLayout_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function CommonGroupLayout_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_CommonGroupLayout_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function CommonGroupLayout_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_CommonGroupLayout_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function CommonGroupLayout_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_CommonGroupLayout_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function CommonGroupLayout_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_CommonGroupLayout_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitGroup_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitGroup_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitGroup_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitGroup_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitGroup_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitGroup_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitGroup_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_HabitGroup_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function HabitGroup_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitGroup_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitItem_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitItem_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitItem_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitItem_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitItem_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitItem_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitItem_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_HabitItem_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function HabitItem_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitItem_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitRecord_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitRecord_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitRecord_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitRecord_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitRecord_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitRecord_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function HabitRecord_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_HabitRecord_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function HabitRecord_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_HabitRecord_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskNode_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskNode_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskNode_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskNode_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskNode_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskNode_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskNode_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_TaskNode_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function TaskNode_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskNode_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskEdge_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskEdge_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskEdge_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskEdge_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskEdge_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskEdge_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function TaskEdge_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_TaskEdge_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function TaskEdge_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_TaskEdge_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function ButtonItem_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_ButtonItem_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function ButtonItem_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_ButtonItem_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function ButtonItem_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_ButtonItem_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function ButtonItem_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_ButtonItem_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function ButtonItem_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_ButtonItem_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function Collecting_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_Collecting_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function Collecting_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_Collecting_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function Collecting_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_Collecting_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function Collecting_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_Collecting_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function Collecting_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_Collecting_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFeed_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFeed_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFeed_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFeed_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFeed_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFeed_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFeed_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_RssFeed_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function RssFeed_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFeed_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssItem_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssItem_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssItem_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssItem_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssItem_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssItem_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssItem_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_RssItem_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function RssItem_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssItem_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFetchLog_read(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFetchLog_read(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFetchLog_create(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFetchLog_create(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFetchLog_update(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFetchLog_update(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}

function RssFetchLog_postUpdate(context: QueryContext, db: CrudContract): any {
    return { AND: [] };
}

function $check_RssFetchLog_postUpdate(input: any, context: QueryContext): any {
    return true;
}

function RssFetchLog_delete(context: QueryContext, db: CrudContract): any {
    return { NOT: { isDeleted: true } };
}

function $check_RssFetchLog_delete(input: any, context: QueryContext): any {
    if ((!input?.isDeleted)) { return true; }

    return false;
}
export default policy
