export const prompt = `请将下面的文章内容处理为这个格式，务必以 json 格式 Content[] 的结构返回
除了该 json 内容外任何其它内容都不要返回

const ComponentMap = {
  // 布局结构类
  Divider,
  Flex,
  Space,

  // 信息展示类
  Typography,
  'Typography.Title': Typography.Title,
  'Typography.Text': Typography.Text,
  'Typography.Paragraph': Typography.Paragraph,
  Steps,
  Tabs,
  Collapse,
  'Collapse.Panel': Collapse.Panel,
  Description: Descriptions,
  Image,
  List,
  Popover,
  Tooltip,
  Card,
  QRCode,
  Segmented,
  Table,
  Tag,
  Timeline,
  Tree,
  Alert,
  Progress,
}

export interface Content {
  component: keyof typeof ComponentMap // 对应 Ant Design 组件的枚举值
  props?: Record<string, any>       // 对应组件的 props 配置
  children?: Content[] | string     // 子节点，可递归嵌套，或直接是字符串
}

你返回的 Content[] 需要包含以下内容

【simple】一句话简述
- 面向现代用户"扫读"的习惯
- 用一句话就能告诉用户这篇文章值不值得读下去
- 简洁、有吸引力、直击主题

【questions】简单问答
- 请你作为一名"普通人"思考：
  - 当看到这个标题或文章内容时，会自然联想到哪些疑问？
  - 完全不带任何技术背景，用"直觉"和"常识"来提问
- 用文章内容尽量自然地回答这些问题
- 问题的排列要有**逻辑顺序**，引导读者从好奇 -> 理解 -> 收获

【content】转写内容，注意：
按下面的方式，用最适合的组件，优化用户提供的文章内容！

⸻

🧱 段落结构与逻辑优化指南

优化文章段落逻辑，让结构更清晰、重点更突出，提升可读性和专业感。

⸻

✳️ 1. 使用「总-分-总」结构
\t•\t说明：段落结构遵循"开头总结 - 中间展开 - 结尾再总结"的方式，让读者一眼看清主旨。
\t•\t建议：文章开头加上「你将学到什么」，结尾用「小结」呼应。

示例：

📌 本文你将学到：
1. 如何理解函数式编程
2. 它适用于哪些场景
3. 实际应用中该注意什么

...

✅ 小结：函数式编程更适合处理不可变数据结构，尤其在状态管理中优势明显。


⸻

🧩 2. 每段只讲一件事（段落聚焦）
\t•\t说明：一段落中只表达一个中心思想，避免混淆读者视线。
\t•\t避免：同时讲原理 + 步骤，或者多个概念堆叠。

示例：

❌ 错误写法：
Redux 是状态管理工具，它的核心是 store 和 reducer。你可以通过 createStore 创建 store，store 负责维护状态。

✅ 正确写法：
Redux 的核心概念之一是 \`store\`，它是一个保存所有状态的对象，通常通过 \`createStore\` 创建。


⸻

🏷️ 3. 使用清晰的小标题和层级结构
\t•\t说明：小标题不仅分段，还让文章逻辑更清晰，便于快速扫读。
\t•\t建议：为每个段落提炼一个简短标题，结构清晰、易于导航。

示例：

## 什么是函数式编程？

## 为什么函数式编程更适合不可变数据？

## 在项目中如何使用函数式编程思想？


⸻

🔍 4. 按「概念 - 问题 - 解决方案」顺序展开
\t•\t说明：围绕认知流程组织内容，帮助读者理解"是什么"、"为什么"、"怎么做"。

示例：

### 什么是副作用？

副作用指函数对外部环境的影响，如修改全局变量、操作 DOM 等。

### 为什么副作用要被控制？

副作用使得函数不纯，增加测试和维护成本。

### 如何控制副作用？

使用副作用隔离的函数，或通过 useEffect 控制副作用触发时机。


⸻

📦 5. 添加「总结框」或「金句」突出观点
\t•\t说明：把核心观点单独拎出来，增强印象，可作为读者的 takeaway。

示例：

> 📌 总结：副作用控制是构建可预测 UI 的关键，推荐使用 React 的 useEffect 管理生命周期行为。


⸻

📚 6. 文章结尾添加总结段
\t•\t说明：对全文内容做简洁回顾，呼应开头，并明确传达核心观点。

示例：

## 小结

本文介绍了函数式编程的定义、适用场景与实践方式。理解副作用与不可变性，有助于构建更可靠的系统。


⸻

✅ 最终结构参考

# 标题

## 开头（你将学到什么）
- 提前剧透核心观点或问题

## 正文主体
### 小标题 1（概念）
段落一：解释术语
段落二：补充背景

### 小标题 2（问题）
段落三：为什么重要

### 小标题 3（解决方案）
段落四：怎么做，有步骤

## 小结
回顾主线 + 核心观点高亮 + 最后一句话强调主旨

注意：
1. 只需要给我文章内容，忽略（作者、发布日期、前言等于文章内容不相关的信息）
2. 内容应该时刻从读者的角度出发，只提供对读者有用的内容，而不是作者想说的内容
3. 花时间思考用户想要构建什么。
4. 您会竭尽全力让用户满意。最重要的是应用程序美观且运行良好
5. 这是用户与该项目的第一次互动，所以一定要用一个非常美观且代码精良的应用程序让他们惊叹！否则您会感到失望

---

请根据以上规范，对下面的文章进行处理：
`
