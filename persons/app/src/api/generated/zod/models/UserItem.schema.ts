/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    email: z.string(),
    name: z.string().nullish(),
    image: z.string().nullish(),
    role: z.string().default("user"),
}
).strict();
const relationSchema = z.object({
    accounts: z.array(z.unknown()).optional(),
    sessions: z.array(z.unknown()).optional(),
}
);

/**
 * `UserItem` schema excluding foreign keys and relations.
 */
export const UserItemScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `UserItem` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const UserItemSchema = UserItemScalarSchema.merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const UserItemPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const UserItemPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    email: z.string(),
    name: z.string().nullish(),
    image: z.string().nullish(),
    role: z.string().default("user")
}).partial().passthrough();


/**
 * `UserItem` schema for create operations excluding foreign keys and relations.
 */
export const UserItemCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, role: true
});


/**
 * `UserItem` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const UserItemCreateSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, role: true
});


/**
 * `UserItem` schema for update operations excluding foreign keys and relations.
 */
export const UserItemUpdateScalarSchema = baseSchema.partial();


/**
 * `UserItem` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const UserItemUpdateSchema = UserItemUpdateScalarSchema;

