/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
const baseSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    date: z.coerce.date(),
    reason: z.string().default("").nullish(),
    execList: z.any().default("[]").nullish(),
}
).strict();
const relationSchema = z.object({
    habit: z.record(z.unknown()),
}
);
const fkSchema = z.object({
    habitId: z.string(),
}
);

/**
 * `HabitRecord` schema excluding foreign keys and relations.
 */
export const HabitRecordScalarSchema = baseSchema.omit({
    isDeleted: true,
});


/**
 * `HabitRecord` schema including all fields (scalar, foreign key, and relations) and validations.
 */
export const HabitRecordSchema = HabitRecordScalarSchema.merge(fkSchema).merge(relationSchema.partial());


/**
 * Schema used for validating Prisma create input. For internal use only.
 * @private
 */
export const HabitRecordPrismaCreateSchema = baseSchema.partial().passthrough();


/**
 * Schema used for validating Prisma update input. For internal use only.
 * @private
 */
export const HabitRecordPrismaUpdateSchema = z.object({
    id: z.string(),
    createdAt: z.coerce.date().default(() => new Date()),
    updatedAt: z.coerce.date().nullish(),
    isDeleted: z.boolean().default(false).nullish(),
    date: z.coerce.date(),
    reason: z.string().default("").nullish(),
    execList: z.any().default("[]").nullish()
}).partial().passthrough();


/**
 * `HabitRecord` schema for create operations excluding foreign keys and relations.
 */
export const HabitRecordCreateScalarSchema = baseSchema.partial({
    id: true, createdAt: true, updatedAt: true, isDeleted: true, reason: true, execList: true
});


/**
 * `HabitRecord` schema for create operations including scalar fields, foreign key fields, and validations.
 */
export const HabitRecordCreateSchema = HabitRecordCreateScalarSchema.merge(fkSchema);


/**
 * `HabitRecord` schema for update operations excluding foreign keys and relations.
 */
export const HabitRecordUpdateScalarSchema = baseSchema.partial();


/**
 * `HabitRecord` schema for update operations including scalar fields, foreign key fields, and validations.
 */
export const HabitRecordUpdateSchema = HabitRecordUpdateScalarSchema.merge(fkSchema.partial());

