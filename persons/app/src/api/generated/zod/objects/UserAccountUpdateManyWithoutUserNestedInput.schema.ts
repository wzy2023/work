/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { UserAccountCreateWithoutUserInputObjectSchema } from './UserAccountCreateWithoutUserInput.schema';
import { UserAccountUncheckedCreateWithoutUserInputObjectSchema } from './UserAccountUncheckedCreateWithoutUserInput.schema';
import { UserAccountCreateOrConnectWithoutUserInputObjectSchema } from './UserAccountCreateOrConnectWithoutUserInput.schema';
import { UserAccountUpsertWithWhereUniqueWithoutUserInputObjectSchema } from './UserAccountUpsertWithWhereUniqueWithoutUserInput.schema';
import { UserAccountCreateManyUserInputEnvelopeObjectSchema } from './UserAccountCreateManyUserInputEnvelope.schema';
import { UserAccountWhereUniqueInputObjectSchema } from './UserAccountWhereUniqueInput.schema';
import { UserAccountUpdateWithWhereUniqueWithoutUserInputObjectSchema } from './UserAccountUpdateWithWhereUniqueWithoutUserInput.schema';
import { UserAccountUpdateManyWithWhereWithoutUserInputObjectSchema } from './UserAccountUpdateManyWithWhereWithoutUserInput.schema';
import { UserAccountScalarWhereInputObjectSchema } from './UserAccountScalarWhereInput.schema';

import type { Prisma } from '@prisma/client';

type SchemaType = z.ZodType<Prisma.UserAccountUpdateManyWithoutUserNestedInput>;
export const UserAccountUpdateManyWithoutUserNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => UserAccountCreateWithoutUserInputObjectSchema), z.lazy(() => UserAccountCreateWithoutUserInputObjectSchema).array(), z.lazy(() => UserAccountUncheckedCreateWithoutUserInputObjectSchema), z.lazy(() => UserAccountUncheckedCreateWithoutUserInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => UserAccountCreateOrConnectWithoutUserInputObjectSchema),
    z.lazy(() => UserAccountCreateOrConnectWithoutUserInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => UserAccountUpsertWithWhereUniqueWithoutUserInputObjectSchema),
    z.lazy(() => UserAccountUpsertWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(), createMany: z.lazy(() => UserAccountCreateManyUserInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => UserAccountWhereUniqueInputObjectSchema),
    z.lazy(() => UserAccountWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => UserAccountWhereUniqueInputObjectSchema),
    z.lazy(() => UserAccountWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => UserAccountWhereUniqueInputObjectSchema),
    z.lazy(() => UserAccountWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => UserAccountWhereUniqueInputObjectSchema),
    z.lazy(() => UserAccountWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => UserAccountUpdateWithWhereUniqueWithoutUserInputObjectSchema),
    z.lazy(() => UserAccountUpdateWithWhereUniqueWithoutUserInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => UserAccountUpdateManyWithWhereWithoutUserInputObjectSchema),
    z.lazy(() => UserAccountUpdateManyWithWhereWithoutUserInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => UserAccountScalarWhereInputObjectSchema),
    z.lazy(() => UserAccountScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
