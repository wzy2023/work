/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
import { RssFetchLogCreateWithoutFeedInputObjectSchema } from './RssFetchLogCreateWithoutFeedInput.schema';
import { RssFetchLogUncheckedCreateWithoutFeedInputObjectSchema } from './RssFetchLogUncheckedCreateWithoutFeedInput.schema';
import { RssFetchLogCreateOrConnectWithoutFeedInputObjectSchema } from './RssFetchLogCreateOrConnectWithoutFeedInput.schema';
import { RssFetchLogUpsertWithWhereUniqueWithoutFeedInputObjectSchema } from './RssFetchLogUpsertWithWhereUniqueWithoutFeedInput.schema';
import { RssFetchLogCreateManyFeedInputEnvelopeObjectSchema } from './RssFetchLogCreateManyFeedInputEnvelope.schema';
import { RssFetchLogWhereUniqueInputObjectSchema } from './RssFetchLogWhereUniqueInput.schema';
import { RssFetchLogUpdateWithWhereUniqueWithoutFeedInputObjectSchema } from './RssFetchLogUpdateWithWhereUniqueWithoutFeedInput.schema';
import { RssFetchLogUpdateManyWithWhereWithoutFeedInputObjectSchema } from './RssFetchLogUpdateManyWithWhereWithoutFeedInput.schema';
import { RssFetchLogScalarWhereInputObjectSchema } from './RssFetchLogScalarWhereInput.schema';

import type { Prisma } from '@prisma/client';

type SchemaType = z.ZodType<Prisma.RssFetchLogUncheckedUpdateManyWithoutFeedNestedInput>;
export const RssFetchLogUncheckedUpdateManyWithoutFeedNestedInputObjectSchema: SchemaType = z.object({
    create: z.union([z.lazy(() => RssFetchLogCreateWithoutFeedInputObjectSchema), z.lazy(() => RssFetchLogCreateWithoutFeedInputObjectSchema).array(), z.lazy(() => RssFetchLogUncheckedCreateWithoutFeedInputObjectSchema), z.lazy(() => RssFetchLogUncheckedCreateWithoutFeedInputObjectSchema).array()]).optional(), connectOrCreate: z.union([z.lazy(() => RssFetchLogCreateOrConnectWithoutFeedInputObjectSchema),
    z.lazy(() => RssFetchLogCreateOrConnectWithoutFeedInputObjectSchema).array()]).optional(), upsert: z.union([z.lazy(() => RssFetchLogUpsertWithWhereUniqueWithoutFeedInputObjectSchema),
    z.lazy(() => RssFetchLogUpsertWithWhereUniqueWithoutFeedInputObjectSchema).array()]).optional(), createMany: z.lazy(() => RssFetchLogCreateManyFeedInputEnvelopeObjectSchema).optional().optional(), set: z.union([z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema),
    z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema).array()]).optional(), disconnect: z.union([z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema),
    z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema).array()]).optional(), delete: z.union([z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema),
    z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema).array()]).optional(), connect: z.union([z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema),
    z.lazy(() => RssFetchLogWhereUniqueInputObjectSchema).array()]).optional(), update: z.union([z.lazy(() => RssFetchLogUpdateWithWhereUniqueWithoutFeedInputObjectSchema),
    z.lazy(() => RssFetchLogUpdateWithWhereUniqueWithoutFeedInputObjectSchema).array()]).optional(), updateMany: z.union([z.lazy(() => RssFetchLogUpdateManyWithWhereWithoutFeedInputObjectSchema),
    z.lazy(() => RssFetchLogUpdateManyWithWhereWithoutFeedInputObjectSchema).array()]).optional(), deleteMany: z.union([z.lazy(() => RssFetchLogScalarWhereInputObjectSchema),
    z.lazy(() => RssFetchLogScalarWhereInputObjectSchema).array()]).optional()
}).strict() as SchemaType;
