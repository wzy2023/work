/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import { z } from 'zod';
;
import type { Prisma } from '@prisma/client';

;
import { AiInfoSelectObjectSchema } from '../objects/AiInfoSelect.schema';
;
import { AiInfoWhereUniqueInputObjectSchema } from '../objects/AiInfoWhereUniqueInput.schema';
import { AiInfoWhereInputObjectSchema } from '../objects/AiInfoWhereInput.schema';
import { AiInfoOrderByWithRelationInputObjectSchema } from '../objects/AiInfoOrderByWithRelationInput.schema';
import { AiInfoScalarFieldEnumSchema } from '../enums/AiInfoScalarFieldEnum.schema';
import { AiInfoCreateInputObjectSchema } from '../objects/AiInfoCreateInput.schema';
import { AiInfoUncheckedCreateInputObjectSchema } from '../objects/AiInfoUncheckedCreateInput.schema';
import { AiInfoCreateManyInputObjectSchema } from '../objects/AiInfoCreateManyInput.schema';
import { AiInfoUpdateInputObjectSchema } from '../objects/AiInfoUpdateInput.schema';
import { AiInfoUncheckedUpdateInputObjectSchema } from '../objects/AiInfoUncheckedUpdateInput.schema';
import { AiInfoUpdateManyMutationInputObjectSchema } from '../objects/AiInfoUpdateManyMutationInput.schema';
import { AiInfoUncheckedUpdateManyInputObjectSchema } from '../objects/AiInfoUncheckedUpdateManyInput.schema';
import { AiInfoCountAggregateInputObjectSchema } from '../objects/AiInfoCountAggregateInput.schema';
import { AiInfoMinAggregateInputObjectSchema } from '../objects/AiInfoMinAggregateInput.schema';
import { AiInfoMaxAggregateInputObjectSchema } from '../objects/AiInfoMaxAggregateInput.schema';
import { AiInfoOrderByWithAggregationInputObjectSchema } from '../objects/AiInfoOrderByWithAggregationInput.schema';
import { AiInfoScalarWhereWithAggregatesInputObjectSchema } from '../objects/AiInfoScalarWhereWithAggregatesInput.schema'

type AiInfoInputSchemaType = {
    findUnique: z.ZodType<Prisma.AiInfoFindUniqueArgs>,
    findFirst: z.ZodType<Prisma.AiInfoFindFirstArgs>,
    findMany: z.ZodType<Prisma.AiInfoFindManyArgs>,
    create: z.ZodType<Prisma.AiInfoCreateArgs>,
    createMany: z.ZodType<Prisma.AiInfoCreateManyArgs>,
    delete: z.ZodType<Prisma.AiInfoDeleteArgs>,
    deleteMany: z.ZodType<Prisma.AiInfoDeleteManyArgs>,
    update: z.ZodType<Prisma.AiInfoUpdateArgs>,
    updateMany: z.ZodType<Prisma.AiInfoUpdateManyArgs>,
    upsert: z.ZodType<Prisma.AiInfoUpsertArgs>,
    aggregate: z.ZodType<Prisma.AiInfoAggregateArgs>,
    groupBy: z.ZodType<Prisma.AiInfoGroupByArgs>,
    count: z.ZodType<Prisma.AiInfoCountArgs>
}

export const AiInfoInputSchema = {
    findUnique: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), where: AiInfoWhereUniqueInputObjectSchema
    }).strict(), findFirst: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), where: AiInfoWhereInputObjectSchema.optional(), orderBy: z.union([AiInfoOrderByWithRelationInputObjectSchema, AiInfoOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiInfoWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiInfoScalarFieldEnumSchema).optional()
    }).strict(), findMany: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), where: AiInfoWhereInputObjectSchema.optional(), orderBy: z.union([AiInfoOrderByWithRelationInputObjectSchema, AiInfoOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiInfoWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiInfoScalarFieldEnumSchema).optional()
    }).strict(), create: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), data: z.union([AiInfoCreateInputObjectSchema, AiInfoUncheckedCreateInputObjectSchema])
    }).strict(), createMany: z.object({
        data: z.union([AiInfoCreateManyInputObjectSchema, z.array(AiInfoCreateManyInputObjectSchema)]), skipDuplicates: z.boolean().optional()
    }).strict(), 'delete': z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), where: AiInfoWhereUniqueInputObjectSchema
    }).strict(), deleteMany: z.object({
        where: AiInfoWhereInputObjectSchema.optional()
    }).strict(), update: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), data: z.union([AiInfoUpdateInputObjectSchema, AiInfoUncheckedUpdateInputObjectSchema]), where: AiInfoWhereUniqueInputObjectSchema
    }).strict(), updateMany: z.object({
        data: z.union([AiInfoUpdateManyMutationInputObjectSchema, AiInfoUncheckedUpdateManyInputObjectSchema]), where: AiInfoWhereInputObjectSchema.optional()
    }).strict(), upsert: z.object({
        select: z.lazy(() => AiInfoSelectObjectSchema.optional()), where: AiInfoWhereUniqueInputObjectSchema, create: z.union([AiInfoCreateInputObjectSchema, AiInfoUncheckedCreateInputObjectSchema]), update: z.union([AiInfoUpdateInputObjectSchema, AiInfoUncheckedUpdateInputObjectSchema])
    }).strict(), aggregate: z.object({
        where: AiInfoWhereInputObjectSchema.optional(), orderBy: z.union([AiInfoOrderByWithRelationInputObjectSchema, AiInfoOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiInfoWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([z.literal(true), AiInfoCountAggregateInputObjectSchema]).optional(), _min: AiInfoMinAggregateInputObjectSchema.optional(), _max: AiInfoMaxAggregateInputObjectSchema.optional()
    }).strict(), groupBy: z.object({
        where: AiInfoWhereInputObjectSchema.optional(), orderBy: z.union([AiInfoOrderByWithAggregationInputObjectSchema, AiInfoOrderByWithAggregationInputObjectSchema.array()]).optional(), having: AiInfoScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(AiInfoScalarFieldEnumSchema), _count: z.union([z.literal(true), AiInfoCountAggregateInputObjectSchema]).optional(), _min: AiInfoMinAggregateInputObjectSchema.optional(), _max: AiInfoMaxAggregateInputObjectSchema.optional()
    }).strict(), count: z.object({
        where: AiInfoWhereInputObjectSchema.optional(), orderBy: z.union([AiInfoOrderByWithRelationInputObjectSchema, AiInfoOrderByWithRelationInputObjectSchema.array()]).optional(), cursor: AiInfoWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), distinct: z.array(AiInfoScalarFieldEnumSchema).optional(), select: z.union([z.literal(true), AiInfoCountAggregateInputObjectSchema]).optional()
    }).strict(),
} as AiInfoInputSchemaType;
